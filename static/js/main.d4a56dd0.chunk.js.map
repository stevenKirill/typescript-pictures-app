{"version":3,"sources":["redux/types.ts","components/Header/Header.tsx","components/Sidedraw/Sidedraw.tsx","redux/burgers/enums.ts","redux/utils.ts","redux/burgers/burgerActions.ts","redux/animals/enums.ts","pages/BurgersPage.tsx","keys.ts","pages/FileUploadPage.tsx","redux/animals/animalsActions.ts","pages/SearchPhotosPage.tsx","routes/routes.tsx","components/Menu/Menu.tsx","redux/animals/animalReducer.ts","redux/burgers/burgerReducer.ts","redux/rootReducer.ts","redux/store.ts","App.tsx","reportWebVitals.ts","index.tsx","components/Menu/menu.module.css","components/Header/header.module.css","pages/upload.module.css","pages/burger.module.css"],"names":["EResponseType","EMethod","Header","onOpen","className","styles","header","iconwrapper","onClick","icon","htmlColor","Sidedraw","open","children","setOpened","Drawer","anchor","onClose","EBurgerActions","customPost","url","headers","body","fetch","method","mode","credentials","JSON","stringify","customGet","processPost","dispatch","actionBuilder","response","a","ok","json","data","status","SUCCESS","ERROR","error","processGet","console","log","dispatchAsync","LOADING","POST","GET","Error","message","EAnimalActions","burgerActionBuilder","result","type","LOAD_BURGER_LOADING","LOAD_BURGER_SUCCESS","payload","LOAD_BURGER_ERROR","errors","undefined","breakpoints","default","BurgersPage","useDispatch","useSelector","state","burger","loadBurger","errorBurger","burgersData","useEffect","key","Headers","loadBurgers","renderIngridients","ingredients","List","map","ing","ListItem","ListItemIcon","ListItemText","primary","style","width","margin","CircularProgress","color","textAlign","Divider","marginTop","breakpointCols","myMasonryGrid","columnClassName","gridColumn","Card","sx","maxWidth","CardContent","Typography","gutterBottom","variant","component","name","description","restaurant","Link","href","web","underline","CardActions","Button","size","FileUploadPage","useState","file","setFile","fileName","setFileName","progress","setProgress","err","setErr","filePath","uploadedFile","setUploadedFile","loaded","setLoaded","setTimeout","send","e","formData","FormData","append","axios","post","onUploadProgress","progressEvent","Math","round","total","uploader","align","fontSize","LinearProgress","value","parseInt","htmlFor","Input","id","hidden","onChange","preventDefault","currentTarget","files","IconButton","PhotoCamera","footer","CardMedia","height","image","alt","renderImage","loadAnimalsActionBuilder","LOAD_CAT_LOADING","LOAD_CAT_SUCCESS","LOAD_CAT_ERROR","SearchPhotosPage","animals","loadingAnimals","errorAnimals","animalData","loadAnimals","src","renderer","AppRoutes","path","element","Menu","menu","menuitem","to","link","myicon","initialAnimalsState","initialBurger","rootReducer","combineReducers","action","Object","values","store","createStore","applyMiddleware","thunk","App","opened","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.d4a56dd0.chunk.js","sourcesContent":["import { Action } from 'redux';\r\nimport { EAnimalActions } from './animals/enums';\r\nimport { EBurgerActions } from './burgers/enums';\r\n\r\nexport interface IAction<T> extends Action {\r\n    payload: T;\r\n}\r\n\r\ninterface IError {\r\n    message?: string;\r\n    code?: string;\r\n};\r\n\r\nexport interface IAnimal {\r\n    brightness: string;\r\n    code: number;\r\n    height: number;\r\n    id: number;\r\n    orientation: string;\r\n    tags: Array<string>;\r\n    url: string;\r\n    width: number;\r\n};\r\n\r\nexport interface IAdress {\r\n    addressId: number;\r\n    number: number;\r\n    line1: string;\r\n    line2: string;\r\n    postcode: string;\r\n}\r\n\r\nexport interface IBurger {\r\n    addresses: IAdress[];\r\n    description: string;\r\n    id: number;\r\n    ingredients: string[];\r\n    name: string;\r\n    restaurant: string;\r\n    web: string;\r\n}\r\n\r\nexport interface IInitialState {\r\n    animals: IInitialAnimals;\r\n    burger: IInitialBurgers;\r\n};\r\n\r\nexport interface IInitialAnimals {\r\n    loadingAnimals: boolean;\r\n    errorAnimals: boolean;\r\n    animalData: IAnimal\r\n}\r\n\r\nexport interface IInitialBurgers {\r\n    loadBurger: false;\r\n    errorBurger: false;\r\n    burgersData: IBurger[];\r\n}\r\n\r\nexport type GenericGetState<T> = () => T;\r\nexport type GenericThunkAction<T> = (dispatch: GenericDispatch<T>, getState: GenericGetState<T>) => void;\r\n\r\nexport type GenericDispatch<T> = (action: Action | IAction<any> | GenericThunkAction<T>) => void;\r\n\r\nexport type GenericSelector<T, I> = (state: T, ...args: any) => I;\r\n\r\nexport enum EResponseType {\r\n    LOADING = 'loading',\r\n    SUCCESS = 'success',\r\n    ERROR = 'error',\r\n}\r\n\r\nexport enum EMethod {\r\n    POST = 'POST',\r\n    GET = 'GET'\r\n}\r\n\r\nexport type TDispatch = GenericDispatch<any>;\r\n\r\ninterface IResult {\r\n    type: EAnimalActions | EBurgerActions,\r\n    payload?: any,\r\n}\r\n\r\nexport type TActionBuilder = (result: any) => IResult\r\n","import React from 'react';\r\nimport styles from './header.module.css';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\n\r\ninterface IHeaderProps {\r\n    onOpen: (param: boolean) => void\r\n};\r\n\r\nexport const Header: React.FC<IHeaderProps> = ({ onOpen }) => {\r\n    return (\r\n        <header className={styles.header}>\r\n            <div className={styles.iconwrapper}>\r\n                <MenuIcon \r\n                    onClick={() => onOpen(true)}\r\n                    className={styles.icon}\r\n                    htmlColor=\"white\"\r\n                />\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Drawer from '@mui/material/Drawer';\r\n\r\ninterface IProps {\r\n    open: boolean;\r\n    setOpened: (param: boolean) => void;\r\n};\r\n\r\nexport const Sidedraw: React.FC<IProps> = ({ open, children, setOpened }) => {\r\n    return (\r\n        <>\r\n          <Drawer\r\n            open={open}\r\n            anchor=\"left\"\r\n            onClose={() => setOpened(false)}\r\n          >\r\n              {children}\r\n            </Drawer>  \r\n        </>\r\n    );\r\n};\r\n","export enum EBurgerActions {\r\n    LOAD_BURGER_LOADING = 'LOAD_BURGER_LOADING',\r\n    LOAD_BURGER_SUCCESS = 'LOAD_BURGER_SUCCESS',\r\n    LOAD_BURGER_ERROR = 'LOAD_BURGER_ERROR',\r\n};","\r\nimport { EResponseType, TDispatch, TActionBuilder, EMethod } from \"./types\";\r\n\r\nconst customPost = (url: string, headers?: any, body?: any) => {\r\n    return fetch(url,{\r\n        method: 'POST',\r\n        mode: 'cors',\r\n        credentials: 'include',\r\n        headers: headers,\r\n        body: JSON.stringify(body),\r\n    })\r\n};\r\n\r\nconst customGet = (url: string, headers?: any) => {\r\n    return fetch(url,{\r\n        method: 'GET',\r\n        mode: 'cors',\r\n        credentials: 'include',\r\n        headers: headers,\r\n    })\r\n}\r\n\r\nexport const processPost = async (\r\n    dispatch: TDispatch,\r\n    actionBuilder: TActionBuilder,\r\n    response: any,\r\n) => {\r\n    if (response.ok) {\r\n        const data = await response.json();\r\n        dispatch(actionBuilder({\r\n            status: EResponseType.SUCCESS,\r\n            data,\r\n        }))\r\n    } else {\r\n        dispatch(actionBuilder({\r\n            status: EResponseType.ERROR,\r\n            error: response.status\r\n        }))\r\n    }\r\n};\r\n\r\nexport const processGet = async (\r\n    dispatch: TDispatch,\r\n    actionBuilder: TActionBuilder,\r\n    response: any,\r\n) => {\r\n    if (response.ok) {\r\n        const data = await response.json();\r\n        console.log(data)\r\n        dispatch(actionBuilder({\r\n            status: EResponseType.SUCCESS,\r\n            data,\r\n        }))\r\n    } else {\r\n        dispatch(actionBuilder({\r\n            status: EResponseType.ERROR,\r\n            error: response.status\r\n        }))\r\n    }\r\n};\r\n\r\n\r\nexport const dispatchAsync = async (\r\n    dispatch: TDispatch,\r\n    method: EMethod,\r\n    body: any,\r\n    headers: any,\r\n    url: string,\r\n    actionBuilder: TActionBuilder,\r\n): Promise<any> => {\r\n    dispatch(actionBuilder({ status: EResponseType.LOADING }));\r\n    try {\r\n        if (method === EMethod.POST) {\r\n            const response = await customPost(url,headers,body);\r\n            return processPost(dispatch,actionBuilder,response);\r\n        } else if (method === EMethod.GET) {\r\n            const response = await customGet(url, headers);\r\n            return processGet(dispatch,actionBuilder,response);\r\n        }\r\n\r\n    } catch (e) {\r\n        if (e instanceof Error) {\r\n            dispatch(\r\n                actionBuilder({\r\n                    status: EResponseType.ERROR,\r\n                    error: e.message\r\n                })\r\n            )\r\n        }\r\n    }\r\n};","import { EMethod, EResponseType, TDispatch } from \"../types\"\r\nimport { dispatchAsync } from \"../utils\"\r\nimport { EBurgerActions } from \"./enums\";\r\n\r\n\r\nexport const burgerActionBuilder = (result: any) => {\r\n    switch (result.status) {\r\n        case EResponseType.LOADING:\r\n            return {\r\n                type: EBurgerActions.LOAD_BURGER_LOADING,\r\n            };\r\n        case EResponseType.SUCCESS:\r\n            return {\r\n                type: EBurgerActions.LOAD_BURGER_SUCCESS,\r\n                payload: {\r\n                    ...result.data\r\n                }\r\n            };\r\n        case EResponseType.ERROR:\r\n            return {\r\n                type: EBurgerActions.LOAD_BURGER_ERROR,\r\n                payload: {\r\n                    errors: result.error,\r\n                },\r\n            };\r\n        default:\r\n            throw new Error(JSON.stringify(result, undefined, 2));\r\n    }\r\n}\r\n\r\nexport const loadBurgers = (url: string, method: EMethod, key: string, body?: any) => {\r\n    const headers = new Headers({\r\n        'x-rapidapi-host': 'burgers1.p.rapidapi.com',\r\n        'x-rapidapi-key': `${key}`\r\n      });\r\n    return (dispatch: TDispatch) => {\r\n        return dispatchAsync(dispatch,method,body,headers,url,burgerActionBuilder)\r\n    }\r\n}","export enum EAnimalActions {\r\n    LOAD_CAT_LOADING = 'LOAD_CAT_LOADING',\r\n    LOAD_CAT_SUCCESS = 'LOAD_CAT_SUCCESS',\r\n    LOAD_CAT_ERROR = 'LOAD_CAT_ERROR',\r\n};","import React, { useEffect } from 'react';\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    CircularProgress,\r\n    Typography,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Divider,\r\n} from '@mui/material';\r\nimport Link from '@mui/material/Link';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { burgerkey } from '../keys';\r\nimport { loadBurgers } from '../redux/burgers/burgerActions';\r\nimport { EMethod, IBurger, IInitialState } from '../redux/types';\r\nimport BookmarkBorderIcon from '@mui/icons-material/BookmarkBorder';\r\nimport Masonry from 'react-masonry-css';\r\nimport styles from './burger.module.css';\r\n\r\nconst breakpoints = {\r\n    default: 3,\r\n    1100: 2,\r\n    700: 1\r\n};\r\n\r\nconst BurgersPage = () => {\r\n    const dispatch = useDispatch();\r\n    const { loadBurger, errorBurger, burgersData } = useSelector((state: IInitialState) => {\r\n        const { burger } = state;\r\n        return burger\r\n    });\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            loadBurgers('https://burgers1.p.rapidapi.com/burgers',EMethod.GET,burgerkey)\r\n        )\r\n    },[]);\r\n\r\n    const renderIngridients = (burger: IBurger) => {\r\n        const { ingredients } = burger\r\n        return (\r\n        <List>\r\n            {ingredients.map(ing => {\r\n                return (<ListItem>\r\n                    <ListItemIcon>\r\n                        <BookmarkBorderIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText\r\n                        primary={ing}\r\n                    />\r\n                    </ListItem>\r\n                    )\r\n                })\r\n            }\r\n        </List>\r\n        )\r\n    };\r\n\r\n    const renderBurgers = () => {\r\n        return burgersData.map(burger => {\r\n            return (\r\n                <div>\r\n                    <Card sx={{ maxWidth: 345 }}>\r\n                        <CardContent>\r\n                            <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                                Name: {burger.name}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                Description: {burger.description}\r\n                            </Typography>\r\n                            {renderIngridients(burger)}\r\n                            <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                Restaurant: {burger.restaurant}\r\n                            </Typography>\r\n                            <Link href={burger.web} underline=\"none\">\r\n                                {'Visit website'}\r\n                            </Link>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                            <Button size=\"small\">Share</Button>\r\n                            <Button size=\"small\">Learn More</Button>\r\n                        </CardActions>\r\n                    </Card>\r\n                </div>\r\n            )\r\n        })\r\n    };\r\n\r\n    const rednerFunc = () => {\r\n        if (loadBurger) {\r\n            return (\r\n                <div style={{ width: '100px', margin: '50px auto' }}>\r\n                    <CircularProgress color=\"primary\"/>\r\n                </div>\r\n            )\r\n        } else if (!loadBurger && errorBurger) {\r\n            return <div style={{ textAlign: 'center' }}>Error</div>\r\n        } else if (!loadBurger && burgersData) {\r\n            return (\r\n                <div>\r\n                    <h1 style={{ textAlign: 'center' }}>Burgers</h1>\r\n                    <Divider/>\r\n                    <div style={{ marginTop: '30px' }}>\r\n                        <Masonry\r\n                            breakpointCols={breakpoints}\r\n                            className={styles.myMasonryGrid}\r\n                            columnClassName={styles.gridColumn}\r\n                        >\r\n                            {renderBurgers()}\r\n                        </Masonry>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    return <div style={{ width: '98%', margin: '10px auto' }}>{rednerFunc()}</div>\r\n}\r\n\r\nexport default BurgersPage\r\n","export const key = '76e3b066d5msh257dd74d672476bp17dbf2jsn237ef5861df3';\r\n\r\nexport const burgerkey = '76e3b066d5msh257dd74d672476bp17dbf2jsn237ef5861df3';","import React, { useState, useEffect } from 'react';\r\nimport { Button, LinearProgress, Input, IconButton, Typography, Divider, Card, CardMedia, CardContent } from '@mui/material';\r\nimport axios from 'axios';\r\nimport { PhotoCamera } from '@mui/icons-material';\r\nimport styles from './upload.module.css';\r\n// import image from '../uploads/lljhj.jpg';\r\n\r\ninterface IFile {\r\n    fileName: string;\r\n    filePath: string;\r\n};\r\n\r\nexport const FileUploadPage:React.FC = () => {\r\n    const [file,setFile] = useState<Blob | string>('');\r\n    const [fileName,setFileName] = useState<string>('');\r\n    const [progress,setProgress] = useState<any>(null);\r\n    const [err,setErr] = useState<string>('');\r\n    const [uploadedFile,setUploadedFile] = useState<IFile>({\r\n        fileName: '',\r\n        filePath: '',\r\n    });\r\n    const [loaded,setLoaded] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        if (err !== '') {\r\n            setTimeout(() => {\r\n                setErr('');\r\n            },3000);\r\n        };\r\n    },[err]);\r\n\r\n    useEffect(() => {\r\n        if (loaded) {\r\n            setTimeout(() => {\r\n                setProgress(null);\r\n                setLoaded(false);\r\n            },2000);\r\n        }\r\n    },[loaded]);\r\n\r\n    const upload = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n        const target = e.currentTarget as HTMLInputElement;\r\n        // @ts-ignore\r\n        const file = target.files[0];\r\n        setFile(file);\r\n        setFileName(file.name);\r\n    };\r\n\r\n    const send = async (e: React.MouseEvent<HTMLButtonElement>) => {\r\n        const formData = new FormData();\r\n        formData.append('file',file);\r\n        try {\r\n            const response = await axios.post('http://localhost:5000/upload-file',formData,{\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data',\r\n                    'Access-Control-Allow-Origin': '*',\r\n                },\r\n                onUploadProgress: progressEvent => {\r\n                    setProgress(\r\n                        Math.round((progressEvent.loaded * 100) / progressEvent.total)\r\n                    );\r\n                  }\r\n            });\r\n            const { data } = response;\r\n            const { fileName, filePath } = data;\r\n            setUploadedFile({\r\n                fileName,\r\n                filePath,\r\n            });\r\n            setLoaded(true);\r\n            setFileName('');\r\n            setFile('');\r\n        } catch (error) {\r\n            console.error(error);\r\n            setErr(\"Server error\");\r\n            setProgress(null);\r\n            setLoaded(false);\r\n        };\r\n    };\r\n\r\n    const renderImage = () => {\r\n        const { fileName } = uploadedFile;\r\n        return (\r\n            <div style={{ marginTop: '20px' }}>\r\n                <Divider/>\r\n                <Card>\r\n                    <CardMedia\r\n                        component=\"img\"\r\n                        height=\"100%\"\r\n                        image={`../uploads/${fileName}`}\r\n                        alt=\"Uploaded photo\"\r\n                    />\r\n                    <CardContent>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Uploaded photo\r\n                    </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className={styles.uploader}>\r\n            <Typography align=\"center\" fontSize={24}>\r\n                Upload file\r\n            </Typography>\r\n            {progress &&\r\n            <div style={{ marginTop: '20px' }}>\r\n                <LinearProgress value={parseInt(progress)}/>\r\n            </div>\r\n            }\r\n            <label htmlFor=\"icon-button-file\">\r\n                <Input \r\n                    id=\"icon-button-file\"\r\n                    type=\"file\"\r\n                    className={styles.hidden} \r\n                    onChange={upload}\r\n                />\r\n                <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\r\n                    <PhotoCamera />\r\n                </IconButton>\r\n            </label>\r\n            {fileName !== '' && <span>{fileName}</span>}\r\n            <Divider/>\r\n            <div className={styles.footer}>\r\n                <Button \r\n                    variant=\"contained\"\r\n                    onClick={send}\r\n                >\r\n                    Submit\r\n                </Button>\r\n            </div>\r\n            {err !== '' &&\r\n                <Typography align=\"center\" fontSize={24} color=\"tomato\">\r\n                {err}\r\n                </Typography>\r\n            }\r\n            {uploadedFile.filePath !== '' ? renderImage() : null}\r\n        </div>\r\n    );\r\n};\r\n","import { EMethod, EResponseType, TDispatch } from \"../types\";\r\nimport { EAnimalActions } from \"./enums\";\r\nimport { dispatchAsync } from \"../utils\";\r\n\r\nconst loadAnimalsActionBuilder = (result: any) => {\r\n    switch (result.status) {\r\n        case EResponseType.LOADING:\r\n            return {\r\n                type: EAnimalActions.LOAD_CAT_LOADING,\r\n            };\r\n        case EResponseType.SUCCESS:\r\n            return {\r\n                type: EAnimalActions.LOAD_CAT_SUCCESS,\r\n                payload: {\r\n                    ...result.data\r\n                }\r\n            };\r\n        case EResponseType.ERROR:\r\n            return {\r\n                type: EAnimalActions.LOAD_CAT_ERROR,\r\n                payload: {\r\n                    errors: result.error,\r\n                },\r\n            };\r\n        default:\r\n            throw new Error(JSON.stringify(result, undefined, 2));\r\n    }\r\n};\r\n\r\n/** Асинхронный экшн. */\r\nexport const loadAnimals = (url: string,method: EMethod,key: string,body?: any) => {\r\n    const headers = new Headers({\r\n        'x-rapidapi-host': 'mlemapi.p.rapidapi.com',\r\n        'x-rapidapi-key': `${key}`\r\n    });\r\n    return (dispatch: TDispatch) => {\r\n        return dispatchAsync(dispatch,method,body,headers,url,loadAnimalsActionBuilder);\r\n    };\r\n};","import React, { useEffect } from 'react';\r\nimport { Typography, Card, CardMedia, CardContent, CircularProgress } from '@mui/material';\r\nimport { key } from '../keys';\r\nimport { loadAnimals } from '../redux/animals/animalsActions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { EMethod, IInitialState, TDispatch } from '../redux/types';\r\n\r\nexport const SearchPhotosPage: React.FC = () => {\r\n    const dispatch: TDispatch = useDispatch();\r\n    const { loadingAnimals, errorAnimals, animalData } = useSelector((state: IInitialState) => {\r\n        const { animals } = state;\r\n        return animals\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n        dispatch(loadAnimals('https://mlemapi.p.rapidapi.com/newmlem',EMethod.GET,key,null,));\r\n    },[]);\r\n\r\n    const renderer = () => {\r\n        let component = null;\r\n        if (loadingAnimals) {\r\n            component = (\r\n                <div style={{ margin: '50px auto', width: '100px', }}>\r\n                    <CircularProgress color=\"secondary\"/>\r\n                </div>\r\n            )\r\n \r\n        } else if (!loadingAnimals && errorAnimals) {\r\n            component = <div>eroror</div>\r\n        } else if (!loadingAnimals && animalData) {\r\n            component = (\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                            Random animal\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <CardMedia\r\n                        component=\"img\"\r\n                        height=\"100%\"\r\n                        width=\"50%\"\r\n                        src={animalData.url}\r\n                        alt=\"Uploaded photo\"\r\n                    />\r\n                </Card>\r\n            )\r\n        }\r\n        return component;\r\n    }\r\n\r\n    return (\r\n        <div style={{ margin: '20px auto' }}>\r\n            {renderer()}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Route, Routes } from 'react-router-dom';\r\nimport BurgersPage from '../pages/BurgersPage';\r\nimport { FileUploadPage } from '../pages/FileUploadPage';\r\nimport { SearchPhotosPage } from '../pages/SearchPhotosPage';\r\n\r\nexport const AppRoutes: React.FC = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path=\"/upload\" element={<FileUploadPage/>}/>\r\n            <Route path=\"/search\" element={<SearchPhotosPage/>}/>\r\n            <Route path=\"/burgers\" element={<BurgersPage/>}/>\r\n        </Routes>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styles from './menu.module.css';\r\nimport { menu } from './menudata';\r\nimport PublishIcon from '@mui/icons-material/Publish';\r\nimport InsertPhotoIcon from '@mui/icons-material/InsertPhoto';\r\nimport DiningIcon from '@mui/icons-material/Dining';\r\n\r\ninterface IMenuProps {\r\n    onClose: (param: boolean) => void\r\n}\r\n\r\nexport const Menu: React.FC<IMenuProps> = ({ onClose }) => {\r\n    return (\r\n        <div className={styles.menu}>\r\n            {/* {menu.map(item => {\r\n                const { path, title, icon } = item;\r\n                return (\r\n                    <div className={styles.menuitem}>\r\n                        <Link to={path}>\r\n                            {icon}\r\n                            <span>{title}</span>\r\n                        </Link>\r\n                    </div>\r\n                )\r\n            })} */}\r\n            <div className={styles.menuitem}>\r\n                <Link to='/upload' className={styles.link} onClick={() => onClose(false)}>\r\n                    <PublishIcon htmlColor=\"white\" className={styles.myicon}/>\r\n                    <span>Upload</span>\r\n                </Link>\r\n            </div>\r\n            <div className={styles.menuitem}>\r\n                <Link to='/search' className={styles.link} onClick={() => onClose(false)}>\r\n                    <InsertPhotoIcon htmlColor=\"white\" className={styles.myicon}/>\r\n                    <span>Search</span>\r\n                </Link>\r\n            </div>\r\n            <div className={styles.menuitem}>\r\n                <Link to='/burgers' className={styles.link} onClick={() => onClose(false)}>\r\n                    <DiningIcon htmlColor=\"white\" className={styles.myicon}/>\r\n                    <span>Burgers</span>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { IAnimal, IInitialAnimals } from '../types';\r\nimport { EAnimalActions } from './enums';\r\n\r\ninterface IAnimalAction {\r\n    type: EAnimalActions,\r\n    payload: any,\r\n}\r\n\r\nconst initialAnimalsState: IInitialAnimals = {\r\n    loadingAnimals: false,\r\n    errorAnimals: false,\r\n    animalData: {} as IAnimal\r\n};\r\n\r\n\r\nexport const animalReducer = (state = initialAnimalsState, action: IAnimalAction) => {\r\n    switch(action.type) {\r\n        case EAnimalActions.LOAD_CAT_LOADING:\r\n            return {\r\n                ...state,\r\n                loadingAnimals: true,\r\n            }\r\n        case EAnimalActions.LOAD_CAT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loadingAnimals: false,\r\n                animalData: action.payload,\r\n            }\r\n        case EAnimalActions.LOAD_CAT_ERROR:\r\n            return {\r\n                ...state,\r\n                loadingAnimals: false,\r\n                errorAnimals: true,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { IInitialBurgers } from \"../types\";\r\nimport { EBurgerActions } from \"./enums\";\r\n\r\ninterface IBurgerAction {\r\n    type: EBurgerActions,\r\n    payload: any,\r\n}\r\n\r\nconst initialBurger: IInitialBurgers = {\r\n    loadBurger: false,\r\n    errorBurger: false,\r\n    burgersData: [],\r\n};\r\n\r\nexport const burgerReducer = (state = initialBurger, action: IBurgerAction) => {\r\n    switch(action.type) {\r\n        case EBurgerActions.LOAD_BURGER_LOADING:\r\n            return {\r\n                ...state,\r\n                loadBurger: true,\r\n            }\r\n        case EBurgerActions.LOAD_BURGER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loadBurger: false,\r\n                burgersData: Object.values(action.payload)\r\n            }\r\n        case EBurgerActions.LOAD_BURGER_ERROR:\r\n            return {\r\n                ...state,\r\n                loadBurger: false,\r\n                errorBurger: true,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};","import { combineReducers } from \"redux\";\r\nimport { animalReducer } from \"./animals/animalReducer\";\r\nimport { burgerReducer } from \"./burgers/burgerReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    animals: animalReducer,\r\n    burger: burgerReducer,\r\n}) ","import { createStore, applyMiddleware } from \"redux\";\r\nimport { rootReducer } from \"./rootReducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(rootReducer,applyMiddleware(thunk));\r\n\r\nexport default store;","import React, { useState } from 'react';\nimport { Header } from './components/Header/Header';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Sidedraw } from './components/Sidedraw/Sidedraw';\nimport { AppRoutes } from './routes/routes';\nimport { Menu } from './components/Menu/Menu';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './App.css';\n\nfunction App() {\n  const [opened,setOpened] = useState<boolean>(false);\n  return (\n    <Router>\n      <Provider store={store}>\n      <div className=\"App\">\n        <Header onOpen={setOpened}/>\n          <Sidedraw open={opened} setOpened={setOpened}>\n          <Menu onClose={setOpened}/>\n        </Sidedraw>\n      </div>\n      <AppRoutes/>\n      </Provider>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"menu_menu__3o_nn\",\"menuitem\":\"menu_menuitem__11L9E\",\"link\":\"menu_link__3a1gH\",\"myicon\":\"menu_myicon__mJWpr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__1926o\",\"icon\":\"header_icon__3Moy2\",\"iconwrapper\":\"header_iconwrapper__k3cvP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hidden\":\"upload_hidden__V8ctu\",\"uploader\":\"upload_uploader__qxAsC\",\"footer\":\"upload_footer__2Zf2H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myMasonryGrid\":\"burger_myMasonryGrid__13oR1\",\"gridColumn\":\"burger_gridColumn__7oIvX\"};"],"sourceRoot":""}